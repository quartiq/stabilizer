(function() {
    var type_impls = Object.fromEntries([["stabilizer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ErrorType-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-ErrorType-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bus, RS, WS&gt; ErrorType for SerialPort&lt;'_, Bus, RS, WS&gt;<div class=\"where\">where\n    Bus: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>Error type of all the IO operations on this type.</div></details></div></details>","ErrorType","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Read-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-Read-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bus, RS, WS&gt; Read for SerialPort&lt;'_, Bus, RS, WS&gt;<div class=\"where\">where\n    Bus: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    &amp;mut self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, &lt;SerialPort&lt;'_, Bus, RS, WS&gt; as ErrorType&gt;::Error&gt;</h4></section></summary><div class='docblock'>Read some bytes from this source into the specified buffer, returning how many bytes were read. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_exact</a>(\n    &amp;mut self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, ReadExactError&lt;Self::Error&gt;&gt;</h4></section></summary><div class='docblock'>Read the exact number of bytes required to fill <code>buf</code>. <a>Read more</a></div></details></div></details>","Read","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ReadReady-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-ReadReady-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bus, RS, WS&gt; ReadReady for SerialPort&lt;'_, Bus, RS, WS&gt;<div class=\"where\">where\n    Bus: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_ready\" class=\"method trait-impl\"><a href=\"#method.read_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_ready</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a>, &lt;SerialPort&lt;'_, Bus, RS, WS&gt; as ErrorType&gt;::Error&gt;</h4></section></summary><div class='docblock'>Get whether the reader is ready for immediately reading. <a>Read more</a></div></details></div></details>","ReadReady","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SerialPort%3C'a,+B,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-SerialPort%3C'a,+B,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, B, RS, WS&gt; SerialPort&lt;'a, B, RS, WS&gt;<div class=\"where\">where\n    B: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_store\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_with_store</a>&lt;'alloc&gt;(\n    alloc: &amp;'alloc UsbBusAllocator&lt;B&gt;,\n    read_store: RS,\n    write_store: WS,\n) -&gt; SerialPort&lt;'a, B, RS, WS&gt;<div class=\"where\">where\n    'alloc: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new USB serial port with the provided UsbBus and buffer backing stores.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_store_and_interface_names\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_with_store_and_interface_names</a>&lt;'alloc&gt;(\n    alloc: &amp;'alloc UsbBusAllocator&lt;B&gt;,\n    read_store: RS,\n    write_store: WS,\n    comm_if_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.str.html\">str</a>&gt;,\n    data_if_name: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.str.html\">str</a>&gt;,\n) -&gt; SerialPort&lt;'a, B, RS, WS&gt;<div class=\"where\">where\n    'alloc: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new USB serial port with the provided UsbBus and buffer backing stores.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.line_coding\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">line_coding</a>(&amp;self) -&gt; &amp;LineCoding</h4></section></summary><div class=\"docblock\"><p>Gets the current line coding.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dtr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">dtr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets the DTR (data terminal ready) state</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rts\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">rts</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets the RTS (request to send) state</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">write</a>(&amp;mut self, data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, UsbError&gt;</h4></section></summary><div class=\"docblock\"><p>Writes bytes from <code>data</code> into the port and returns the number of bytes written.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<ul>\n<li><a href=\"usb_device::UsbError::WouldBlock\"><code>WouldBlock</code></a> - No bytes could be written because the\nbuffers are full.</li>\n</ul>\n<p>Other errors from <code>usb-device</code> may also be propagated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">read</a>(&amp;mut self, data: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, UsbError&gt;</h4></section></summary><div class=\"docblock\"><p>Reads bytes from the port into <code>data</code> and returns the number of bytes read.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<ul>\n<li><a href=\"usb_device::UsbError::WouldBlock\"><code>WouldBlock</code></a> - No bytes available for reading.</li>\n</ul>\n<p>Other errors from <code>usb-device</code> may also be propagated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section></summary><div class=\"docblock\"><p>Sends as much as possible of the current write buffer. Returns <code>Ok</code> if all data that has\nbeen written has been completely written to hardware buffers <code>Err(WouldBlock)</code> if there is\nstill data remaining, and other errors if there’s an error sending data to the host. Note\nthat even if this method returns <code>Ok</code>, data may still be in hardware buffers on either side.</p>\n</div></details></div></details>",0,"stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UsbClass%3CB%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-UsbClass%3CB%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, RS, WS&gt; UsbClass&lt;B&gt; for SerialPort&lt;'_, B, RS, WS&gt;<div class=\"where\">where\n    B: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_configuration_descriptors\" class=\"method trait-impl\"><a href=\"#method.get_configuration_descriptors\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_configuration_descriptors</a>(\n    &amp;self,\n    writer: &amp;mut DescriptorWriter&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section></summary><div class='docblock'>Called when a GET_DESCRIPTOR request is received for a configuration descriptor. When\ncalled, the implementation should write its interface, endpoint and any extra class\ndescriptors into <code>writer</code>. The configuration descriptor itself will be written by\n<a href=\"crate::device::UsbDevice\">UsbDevice</a> and shouldn’t be written by classes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_string\" class=\"method trait-impl\"><a href=\"#method.get_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_string</a>(&amp;self, index: StringIndex, lang_id: LangID) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Gets a class-specific string descriptor. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method trait-impl\"><a href=\"#method.reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reset</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Called after a USB reset after the bus reset sequence is complete.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.endpoint_in_complete\" class=\"method trait-impl\"><a href=\"#method.endpoint_in_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">endpoint_in_complete</a>(&amp;mut self, addr: EndpointAddress)</h4></section></summary><div class='docblock'>Called when endpoint with address <code>addr</code> has completed transmitting data (IN packet). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.control_in\" class=\"method trait-impl\"><a href=\"#method.control_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">control_in</a>(&amp;mut self, xfer: ControlIn&lt;'_, '_, '_, B&gt;)</h4></section></summary><div class='docblock'>Called when a control request is received with direction DeviceToHost. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.control_out\" class=\"method trait-impl\"><a href=\"#method.control_out\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">control_out</a>(&amp;mut self, xfer: ControlOut&lt;'_, '_, '_, B&gt;)</h4></section></summary><div class='docblock'>Called when a control request is received with direction HostToDevice. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bos_descriptors\" class=\"method trait-impl\"><a href=\"#method.get_bos_descriptors\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_bos_descriptors</a>(\n    &amp;self,\n    writer: &amp;mut BosWriter&lt;'_, '_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section></summary><div class='docblock'>Called when a GET_DESCRIPTOR request is received for a BOS descriptor.\nWhen called, the implementation should write its blobs such as capability\ndescriptors into <code>writer</code>. The BOS descriptor itself will be written by\n<a href=\"crate::device::UsbDevice\">UsbDevice</a> and shouldn’t be written by classes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method trait-impl\"><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Called whenever the <code>UsbDevice</code> is polled.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.endpoint_setup\" class=\"method trait-impl\"><a href=\"#method.endpoint_setup\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">endpoint_setup</a>(&amp;mut self, addr: EndpointAddress)</h4></section></summary><div class='docblock'>Called when endpoint with address <code>addr</code> has received a SETUP packet. Implementing this\nshouldn’t be necessary in most cases, but is provided for completeness’ sake. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.endpoint_out\" class=\"method trait-impl\"><a href=\"#method.endpoint_out\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">endpoint_out</a>(&amp;mut self, addr: EndpointAddress)</h4></section></summary><div class='docblock'>Called when endpoint with address <code>addr</code> has received data (OUT packet). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_alt_setting\" class=\"method trait-impl\"><a href=\"#method.get_alt_setting\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_alt_setting</a>(&amp;mut self, interface: InterfaceNumber) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Called when the interfaces alternate setting state is requested. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_alt_setting\" class=\"method trait-impl\"><a href=\"#method.set_alt_setting\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set_alt_setting</a>(\n    &amp;mut self,\n    interface: InterfaceNumber,\n    alternative: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Called when the interfaces alternate setting state is altered. <a>Read more</a></div></details></div></details>","UsbClass<B>","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-Write-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bus, RS, WS&gt; Write for SerialPort&lt;'_, Bus, RS, WS&gt;<div class=\"where\">where\n    Bus: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    &amp;mut self,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, &lt;SerialPort&lt;'_, Bus, RS, WS&gt; as ErrorType&gt;::Error&gt;</h4></section></summary><div class='docblock'>Write a buffer into this writer, returning how many bytes were written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flush</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, &lt;SerialPort&lt;'_, Bus, RS, WS&gt; as ErrorType&gt;::Error&gt;</h4></section></summary><div class='docblock'>Flush this output stream, blocking until all intermediately buffered contents reach their destination.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, Self::Error&gt;</h4></section></summary><div class='docblock'>Write an entire buffer into this writer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_fmt</a>(\n    &amp;mut self,\n    fmt: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, WriteFmtError&lt;Self::Error&gt;&gt;</h4></section></summary><div class='docblock'>Write a formatted string into this writer, returning any error encountered. <a>Read more</a></div></details></div></details>","Write","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteReady-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-WriteReady-for-SerialPort%3C'_,+Bus,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bus, RS, WS&gt; WriteReady for SerialPort&lt;'_, Bus, RS, WS&gt;<div class=\"where\">where\n    Bus: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_ready\" class=\"method trait-impl\"><a href=\"#method.write_ready\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_ready</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a>, &lt;SerialPort&lt;'_, Bus, RS, WS&gt; as ErrorType&gt;::Error&gt;</h4></section></summary><div class='docblock'>Get whether the writer is ready for immediately writing. <a>Read more</a></div></details></div></details>","WriteReady","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_serial_Read%3Cu8%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-_embedded_hal_serial_Read%3Cu8%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, RS, WS&gt; Read&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt; for SerialPort&lt;'_, B, RS, WS&gt;<div class=\"where\">where\n    B: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = UsbError</h4></section></summary><div class='docblock'>Read error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>, Error&lt;&lt;SerialPort&lt;'_, B, RS, WS&gt; as Read&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Reads a single word from the serial interface</div></details></div></details>","Read<u8>","stabilizer::hardware::SerialPort"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-_embedded_hal_serial_Write%3Cu8%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"impl\"><a href=\"#impl-_embedded_hal_serial_Write%3Cu8%3E-for-SerialPort%3C'_,+B,+RS,+WS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, RS, WS&gt; Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt; for SerialPort&lt;'_, B, RS, WS&gt;<div class=\"where\">where\n    B: UsbBus,\n    RS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,\n    WS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Error</a> = UsbError</h4></section></summary><div class='docblock'>Write error</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(\n    &amp;mut self,\n    word: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, Error&lt;&lt;SerialPort&lt;'_, B, RS, WS&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Writes a single word to the serial interface</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flush\" class=\"method trait-impl\"><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flush</a>(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, Error&lt;&lt;SerialPort&lt;'_, B, RS, WS&gt; as Write&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>&gt;&gt;::Error&gt;&gt;</h4></section></summary><div class='docblock'>Ensures that none of the previously written words are still buffered</div></details></div></details>","Write<u8>","stabilizer::hardware::SerialPort"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[31575]}