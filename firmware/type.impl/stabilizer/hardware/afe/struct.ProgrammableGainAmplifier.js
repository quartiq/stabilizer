(function() {
    var type_impls = Object.fromEntries([["stabilizer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProgrammableGainAmplifier%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/stabilizer/hardware/afe.rs.html#8-31\">Source</a><a href=\"#impl-ProgrammableGainAmplifier%3CP%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"struct\" href=\"stabilizer/hardware/afe/struct.ProgrammableGainAmplifier.html\" title=\"struct stabilizer::hardware::afe::ProgrammableGainAmplifier\">ProgrammableGainAmplifier</a>&lt;P&gt;<div class=\"where\">where\n    P: OutputPin,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/stabilizer/hardware/afe.rs.html#17-21\">Source</a><h4 class=\"code-header\">pub fn <a href=\"stabilizer/hardware/afe/struct.ProgrammableGainAmplifier.html#tymethod.new\" class=\"fn\">new</a>(a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.array.html\">[P; 2]</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Construct a new programmable gain driver.</p>\n<p>Args:</p>\n<ul>\n<li><code>a0</code> - An output connected to the A0 input of the amplifier.</li>\n<li><code>a1</code> - An output connected to the A1 input of the amplifier.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_gain\" class=\"method\"><a class=\"src rightside\" href=\"src/stabilizer/hardware/afe.rs.html#24-30\">Source</a><h4 class=\"code-header\">pub fn <a href=\"stabilizer/hardware/afe/struct.ProgrammableGainAmplifier.html#tymethod.set_gain\" class=\"fn\">set_gain</a>(&amp;mut self, gain: <a class=\"enum\" href=\"stabilizer/convert/enum.Gain.html\" title=\"enum stabilizer::convert::Gain\">Gain</a>)</h4></section></summary><div class=\"docblock\"><p>Set the gain of the front-end.</p>\n</div></details></div></details>",0,"stabilizer::hardware::Pgia"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[2026]}