(function() {
    var type_impls = Object.fromEntries([["stabilizer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UsbDevice%3C'_,+B%3E\" class=\"impl\"><a href=\"#impl-UsbDevice%3C'_,+B%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; UsbDevice&lt;'_, B&gt;<div class=\"where\">where\n    B: UsbBus,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bus\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bus</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.reference.html\">&amp;B</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the [<code>UsbBus</code>] implementation used by this <code>UsbDevice</code>. You can use this\nto call platform-specific methods on the <code>UsbBus</code>.</p>\n<p>While it is also possible to call the standard <code>UsbBus</code> trait methods through this\nreference, this is not recommended as it can cause the device to misbehave.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.state\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">state</a>(&amp;self) -&gt; UsbDeviceState</h4></section></summary><div class=\"docblock\"><p>Gets the current state of the device.</p>\n<p>In general class traffic is only possible in the <code>Configured</code> state.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remote_wakeup_enabled\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remote_wakeup_enabled</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets whether host remote wakeup has been enabled by the host.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.self_powered\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">self_powered</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Gets whether the device is currently self powered.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_self_powered\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set_self_powered</a>(&amp;mut self, is_self_powered: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Sets whether the device is currently self powered.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_reset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_reset</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section></summary><div class=\"docblock\"><p>Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the\ndevice.</p>\n<p>Mostly useful for development. Calling this at the start of your program ensures that the\nhost re-enumerates your device after a new program has been flashed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">poll</a>(&amp;mut self, classes: &amp;mut [&amp;mut dyn UsbClass&lt;B&gt;]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Polls the [<code>UsbBus</code>] for new events and dispatches them to the provided classes. Returns\ntrue if one of the classes may have data available for reading or be ready for writing,\nfalse otherwise. This should be called periodically as often as possible for the best data\nrate, or preferably from an interrupt handler. Must be called at least once every 10\nmilliseconds while connected to the USB host to be USB compliant.</p>\n<p>Note: The list of classes passed in must be the same classes in the same order for every\ncall while the device is configured, or the device may enumerate incorrectly or otherwise\nmisbehave. The easiest way to do this is to call the <code>poll</code> method in only one place in your\ncode, as follows:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code>usb_dev.poll(<span class=\"kw-2\">&amp;mut </span>[<span class=\"kw-2\">&amp;mut </span>class1, <span class=\"kw-2\">&amp;mut </span>class2]);</code></pre></div>\n<p>Strictly speaking the list of classes is allowed to change between polls if the device has\nbeen reset, which is indicated by <code>state</code> being equal to [<code>UsbDeviceState::Default</code>].</p>\n</div></details></div></details>",0,"stabilizer::hardware::UsbDevice"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5256]}