(function() {
    var type_impls = Object.fromEntries([["stabilizer",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UsbBus%3CUSB%3E\" class=\"impl\"><a href=\"#impl-UsbBus%3CUSB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;USB&gt; UsbBus&lt;USB&gt;<div class=\"where\">where\n    USB: UsbPeripheral,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    peripheral: USB,\n    ep_memory: &amp;'static mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u32.html\">u32</a>],\n) -&gt; UsbBusAllocator&lt;UsbBus&lt;USB&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new USB peripheral driver.</p>\n</div></details><section id=\"method.free\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">free</a>(self) -&gt; USB</h4></section><section id=\"method.force_reset\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_reset</a>(&amp;self, delay: &amp;mut impl DelayMs&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulpi_read\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ulpi_read</a>(&amp;self, addr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>, UlpiError&gt;</h4></section></summary><div class=\"docblock\"><p>Reads from a ULPI register in an external ULPI PHY.</p>\n<p>Interrupts are disabled for the duration of the function call.</p>\n<p><strong>Panics:</strong> if <code>phy_type</code> is not <code>PhyType::ExternalHighSpeed</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_usb_vid_pid&lt;USB: UsbPeripheral&gt;(bus: <span class=\"kw-2\">&amp;</span>UsbBus&lt;USB&gt;) -&gt; (u16, u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vid: u16 = bus.ulpi_read(<span class=\"number\">0x00</span>) <span class=\"kw\">as </span>u16;\n    vid |= (bus.ulpi_read(<span class=\"number\">0x01</span>) <span class=\"kw\">as </span>u16) &lt;&lt; <span class=\"number\">8</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pid: u16 = bus.ulpi_read(<span class=\"number\">0x02</span>) <span class=\"kw\">as </span>u16;\n    pid |= (bus.ulpi_read(<span class=\"number\">0x03</span>) <span class=\"kw\">as </span>u16) &lt;&lt; <span class=\"number\">8</span>;\n    (vid, pid)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulpi_write\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ulpi_write</a>(&amp;self, addr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>, data: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UlpiError&gt;</h4></section></summary><div class=\"docblock\"><p>Writes to a ULPI register in an external ULPI PHY.</p>\n<p>Interrupts are disabled for the duration of the function call.</p>\n<p><strong>Panics:</strong> if <code>phy_type</code> is not <code>PhyType::ExternalHighSpeed</code>.</p>\n</div></details></div></details>",0,"stabilizer::hardware::UsbBus"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UsbBus-for-UsbBus%3CUSB%3E\" class=\"impl\"><a href=\"#impl-UsbBus-for-UsbBus%3CUSB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;USB&gt; UsbBus for UsbBus&lt;USB&gt;<div class=\"where\">where\n    USB: UsbPeripheral,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.QUIRK_SET_ADDRESS_BEFORE_STATUS\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.QUIRK_SET_ADDRESS_BEFORE_STATUS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">QUIRK_SET_ADDRESS_BEFORE_STATUS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a> = true</h4></section></summary><div class='docblock'>Indicates that <code>set_device_address</code> must be called before accepting the corresponding\ncontrol transfer, not after. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_ep\" class=\"method trait-impl\"><a href=\"#method.alloc_ep\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">alloc_ep</a>(\n    &amp;mut self,\n    ep_dir: UsbDirection,\n    ep_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;EndpointAddress&gt;,\n    ep_type: EndpointType,\n    max_packet_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u16.html\">u16</a>,\n    interval: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;EndpointAddress, UsbError&gt;</h4></section></summary><div class='docblock'>Allocates an endpoint and specified endpoint parameters. This method is called by the device\nand class implementations to allocate endpoints, and can only be called before\n<a href=\"UsbBus::enable\"><code>enable</code></a> is called. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.enable\" class=\"method trait-impl\"><a href=\"#method.enable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">enable</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Enables and initializes the USB peripheral. Soon after enabling the device will be reset, so\nthere is no need to perform a USB reset in this method.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method trait-impl\"><a href=\"#method.reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reset</a>(&amp;self)</h4></section></summary><div class='docblock'>Called when the host resets the device. This will be soon called after\n<a href=\"crate::device::UsbDevice::poll\"><code>poll</code></a> returns [<code>PollResult::Reset</code>]. This method should\nreset the state of all endpoints and peripheral flags back to a state suitable for\nenumeration, as well as ensure that all endpoints previously allocated with alloc_ep are\ninitialized as specified.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_device_address\" class=\"method trait-impl\"><a href=\"#method.set_device_address\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set_device_address</a>(&amp;self, addr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Sets the device USB address to <code>addr</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(&amp;self, ep_addr: EndpointAddress, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, UsbError&gt;</h4></section></summary><div class='docblock'>Writes a single packet of data to the specified endpoint and returns number of bytes\nactually written. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(\n    &amp;self,\n    ep_addr: EndpointAddress,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.usize.html\">usize</a>, UsbError&gt;</h4></section></summary><div class='docblock'>Reads a single packet of data from the specified endpoint and returns the actual length of\nthe packet. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_stalled\" class=\"method trait-impl\"><a href=\"#method.set_stalled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set_stalled</a>(&amp;self, ep_addr: EndpointAddress, stalled: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Sets or clears the STALL condition for an endpoint. If the endpoint is an OUT endpoint, it\nshould be prepared to receive data again.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_stalled\" class=\"method trait-impl\"><a href=\"#method.is_stalled\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_stalled</a>(&amp;self, ep_addr: EndpointAddress) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Gets whether the STALL condition is set for an endpoint.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.suspend\" class=\"method trait-impl\"><a href=\"#method.suspend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">suspend</a>(&amp;self)</h4></section></summary><div class='docblock'>Causes the USB peripheral to enter USB suspend mode, lowering power consumption and\npreparing to detect a USB wakeup event. This will be called after\n<a href=\"crate::device::UsbDevice::poll\"><code>poll</code></a> returns [<code>PollResult::Suspend</code>]. The device will\ncontinue be polled, and it shall return a value other than <code>Suspend</code> from <code>poll</code> when it no\nlonger detects the suspend condition.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resume\" class=\"method trait-impl\"><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">resume</a>(&amp;self)</h4></section></summary><div class='docblock'>Resumes from suspend mode. This may only be called after the peripheral has been previously\nsuspended.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method trait-impl\"><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">poll</a>(&amp;self) -&gt; PollResult</h4></section></summary><div class='docblock'>Gets information about events and incoming data. Usually called in a loop or from an\ninterrupt handler. See the [<code>PollResult</code>] struct for more information.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_reset\" class=\"method trait-impl\"><a href=\"#method.force_reset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">force_reset</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/core/primitive.unit.html\">()</a>, UsbError&gt;</h4></section></summary><div class='docblock'>Simulates a disconnect from the USB bus, causing the host to reset and re-enumerate the\ndevice. <a>Read more</a></div></details></div></details>","UsbBus","stabilizer::hardware::UsbBus"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[13088]}